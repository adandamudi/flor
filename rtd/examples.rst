Flor Examples
===============


Iterative Fibonacci Sequence
-----------------------------
Here we have an iterative fibonacci function that calculates ``idx`` number of fibonacci numbers.

.. code-block:: python
	#iterative fibonacci
	def fib(idx):
	    fib = {}
	    fib[0] = 0
	    fib[1] = 1
	    fib[2] = 1

	    for i in range(3, idx + 1):
	        fib[i] = fib[i - 1] + fib[i - 2]
	with flor.Context('fib'):
	    fib(3)

Let's modify this so that flor logging can work. After importing flor, we add the ``@flor.track`` tag before the function and use ``log.param()`` and ``log.metric()`` to specify parameters and outputs of interest.

.. code-block:: python
	#iterative fibonacci
	import flor
	log = flor.log

	@flor.track
	def fib(idx):
	    fib = {}
	    fib[log.param(0)] = log.metric(0)
	    fib[log.param(1)] = log.metric(1)
	    fib[log.param(2)] = log.metric(1)

	    for i in range(3, idx + 1):
	        fib[log.param(i)] = log.metric(fib[i - 1] + fib[i - 2])


	with flor.Context('fib'):
	    fib(3)

The log generated by running this fibonacci code can be found in the examples directory of flor's repo: https://github.com/ucbrise/flor/tree/master/examples/fib.
The log is named ``clean_fib_log.json``.


Random Forest Classifier
--------------------------
Now let's take a look at the code below, which is representative of a real life data science workflow. The program takes in movie reviews from (INSERT NAME HERE) as ``data.json``, where the data is formatted as ``{'text': {'0': <text>, '1': <text>, '2': <text>, ...}, 'rating': {'0': <int>, '1':<int>, '2':<int>, ...}}``. Flor related additions are highlighted with ``########``.

.. code-block::python
	import flor
	import pandas as pd

	import cloudpickle

	from sklearn.feature_extraction.text import TfidfVectorizer
	from sklearn.model_selection import train_test_split
	from sklearn.ensemble import RandomForestClassifier

	##############
	log = flor.log
	##############

	###########
	@flor.track
	###########
	def train_model(n_estimators, X_tr, y_tr):
	    clf = RandomForestClassifier(n_estimators=log.param(n_estimators)).fit(X_tr, y_tr)
	    with open(log.write('clf.pkl'), 'wb') as classifier:
	        cloudpickle.dump(clf, classifier)
	    return clf

	#########
	@flor.track
	#########
	def test_model(clf, X_te, y_te):
				#########
	    score = log.metric(clf.score(X_te, y_te))
	    		#########

	#########
	@flor.track
	#########
	def main(x, y, z):
	    # Load the Data
	    							#########
	    movie_reviews = pd.read_json(log.read('data.json'))
	    							#########

	    movie_reviews['rating'] = movie_reviews['rating'].map(lambda x: 0 if x < z else 1)

	    # Do train/test split-
	    													############
	    X_tr, X_te, y_tr, y_te = train_test_split(movie_reviews['text'], movie_reviews['rating'],
	                                              test_size=log.param(x),
	                                              random_state=log.param(y))
                                              				############

	    # Vectorize the English sentences
	    vectorizer = TfidfVectorizer()
	    vectorizer.fit(X_tr)
	    X_tr = vectorizer.transform(X_tr)
	    X_te = vectorizer.transform(X_te)

	    # Fit the model
	    for i in [1, 5]:
	        clf = train_model(i, X_tr, y_tr)
	        test_model(clf, X_te, y_te)

	##########################
	with flor.Context('basic'):
	##########################
	    main(0.2, 92, 5)
